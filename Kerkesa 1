Memoria paraqet nje varg bajtash ne te cilat perdoruesi mund mund ti shfrytzoj ato bajta per te ruajtur nje shenim apo informate te caktuar, ku varsisht nga madhesia e informates ndahen numer i caktuar i bajtave per mbajtjen e tyre.Adresat fizike paraqesin adresen e dhene me bajta ne te cilen gjenden informata te cilat i kemi shenuar dhe ruajtur me pare ne ate adrese te caktuar.
Variablat jane emra te cilat ju lihen adresave te caktuara ne menyre qe te ju qasemi me shpejt informatave qe gjenden ne ate adrese gjegjesisht ne ate variabel te caktuar, pra informata apo vlera qe gjendet ne nje adrese te caktuar paraqet vleren e nje variable te emertuar ne ate adrese.
Pointeret jane variabla te cilat permbajne adresen e nje variable tjeter te caktuar, ku varsisht nga lloji i informates apo tipi i varibles qe gjendet ne ate adrese, i jepet po ai tip edhe pointerit i cili deklarohet ne fillim. Deklarimi i pointerit ne gjuhen programuese C++ jepet me shenjen " * " pas tipit te pointerit apo para emrit te pointerit.
Dereferencimi i pointerit paraqetfunksionin e kundert me referencimin e pointerit. Me referencimin e pointerit kemi te bejme me krijimin e nje pointeri i cili do te permbaj nje adrese te caktuar te nje variable, kurse me dereferencim kemi te bejme me marrjen e vleres qe gjendet ne ate adrese te cilen ja kemi krijuar pointerin. Pra dereferencimi i pointerit paraqet marrjen e informates qe gjendet ne pointerin e caktuar te krijuar me pare. Dereferencimi ne kod paraqitet nje menyre per shembull : v=*p , ku ketu variabla v do te marre vleren e cila gjendet ne pointerin e deklaruar me pare me int *p apo ne adresen e caktuar.
L-values quhet shprehja qe shkruhet ne anen e majte te deklarimit me (=) kurse R-values jane shprehjet qe shkruhen pas ketij deklarimi. Pjese e L-values jane emrat e variablave qe shoqrohen edhe me tipe te atyre variablave, pra kurrsesi nuk duhet qe pjese e tyre te jene vlerat e variablave per shembull te shkruhet nje numer,tekst apo diqka e tille. Vlerat qe ju inicializohen variablave, pra tekte apo numra jane pjese e R-values. Domethene nuk mund te shkruhet , shembull : 5+9=c. Operatori & paraqet nje operator me ane te te cilit mund te ja marrim adresen nje variable tjeter apo L-value tjeter. Marrja e adreses se nje variable te krijuar me pare behet duke krijuar nje pointer te ri duke e barazuar me operatorin & te asaj variable, shembull : int *pointer,c; , pointer=&c; . Nese deshirojm te deklarojm pointerin e krijuar do te na shfaqet adresa e varibles c , kurse nese deshirojme ta dereferencojme kete pointer do te na shfaqet vlera e varibles c te ciles ja ka marrur adresen.
Alokimi statik paraqet Stack memorien e cila krijohet per perdorim gjate startimit te programit. Pra te dhenat ruhen ne memorien Stack e cila permban varibla te perkohshme te funksioneve ne program, perfshire ketu edhe funksionin kryesor main(). Kjo memorie ka kapaictet te caktuar e krijuar ne fillim, ra nuk mund as te zvoglohet apo zmadhohet. Ne momerien stack variblat te cilat zene vend ne memorie pas perdorimit te tyre jane te lira per te liruar vendin ne memorie dhe per tu fshier automatikisht me perfundimin e funksionit te caktuar ku eshte perdorur. Shembull : ne funksionin kryesor main() i kemi krijuar disa variabla int a,b; , te cilat jane te alokuara statikisht menjehere ne memorien stack gjate kohes se kompajllimit. Alokimi dinamik paraqet krijimin variableve te cilat krijohen pas kompajllimit te programit, pra gjate kohes kur programi i krijuar shfaqet dhe ne gjata asaj kohe rezervojm memorie per te dhenat te cilat do ti japim, memoria e tille e cila ka hapsire koxha te madhe dhe kapaciteti i saj eshte i kufizuar vetem nga kapaciteti i RAM memories dhe jo nga programi quhet heap memorie. Kjo memorie eshte e kontrolluar direkt nga perdoruesi dhe memorien te cilen ai e rezervon dhe e perdor nuk i fshihet pa urdhrin per fshirje te saj nga perdoruesi. Poashtu vlen te theksohet qe per te patur akses ne variablat apo te dhenat ne heap duhet perdoren pointerat. Alokimi dinamik ne program behet me ane te operatorit new me ane te te cilit kerkojm memorie aq sa deshirojme. Shembull : int n; cin>>n; int *V= new int[n];
Referencat jane pointera te cilat po e barazuam me nje variabel te krijuar me pare atehere ajo ka lokacionin te asaj variable dhe te dyja paraqesin te njejtin shenim qe ka ne ate  lokacion apo adrese. referenca e krijuar per nje variabel mund te quhet edhe si aliasi i asaj variable. Deklarimi behet tipi& n=m (ku int m eshte deklaruar dhe inicializuar me pare). Per dallim nga funksioni i pointerit i cili paraqiste adrese, referencat paraqesin vleren brenda adreses.Shembull : int c=5; int& f=c; cout<<f;(shfaqet 5).
Dallimi ne mes pointereve dhe referencave qendron tek menyra se si perdoren simbolet e operatoreve siq eshte rasti i opretaorit &. Tek pointeret operatori & eshte perdorur per marrjen e adreses se nje variable tjeter duke ja dhene ate nje pointeri, shembull: int* a= &b;. Tek referencat operatori & perdoret gjate deklarimit dhe krijimit te tij ku me ane te & ai ne adresen e njejt te nje variable tjeter mund te marre vleren qe e ka ne adrese dhe poashtu ka qasje edhe ne ndryshimin e vleres qe gjendet ne ate adrese, shembull int& a=b;. Dallim tjeter mes ketyre dyjave jane menyrat se si shfaqen vlerat qe gjenden ne adresat e tyre. Shfaqja e nje vlere qe gjendet ne nje pointer quhet dereferencim i cili shkruhet: cout<<*a; (int* a=c;), kurse tek referencat shfaqja e vlerave behet vetem duke shkruar variablen e references : cout<<b; (int& b=a;)
